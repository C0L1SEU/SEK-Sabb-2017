#define L_MOTOR OUT_A
#define R_MOTOR OUT_C
#define MOTORS OUT_AC
#define GATE OUT_B

#define L_COLOR IN_1
#define R_COLOR IN_4
#define GYRO IN_3

#define OUT      5
#define WHITE    4
#define BLACK    3
#define GREEN    2
#define BLUE     1
#define RED      0

#define DIREITA  0
#define FRENTE   1
#define ESQUERDA 2

#define RAIO_RODA 4
#define OFFSET_SAMPLES 3000

#define BT_CONN 1
#define OUT_MBOX 1
#define IN_MBOX 5

#define FILE_NAME "colors.dat"
#define FILE_SIZE 32

// Inicio de descriçao de headers de funções
sub BTCheck(int conn);
sub Init();
void SetOffsets(void);
float CalculaDistancia(float angulo_motor);
float CalculaAngulo(float distancia);
float GetGyroOffset();
sub detect_colors();
sub detect_fall();
void AndaReto(float distancia);
void MovePortao(float angulo_limite);
sub TurnGyroDireita(float degrees);
sub TurnGyroEsquerda(float degrees);
sub TurnRight();
sub TurnLeft();
sub TurnBack();
void Rebolada();
int AndaVerificando();
void SegueViagem();
void PegaPessoas();
sub open_file_read();
sub update_file(byte color, byte direction);
sub write_matrix();
sub initialize_file();
sub adjust();
sub adjust_color();
sub choose_path();
void detect_people();
sub print_matrix();
// Fim de headers de funções

// VARIAVEIS GLOBAIS
//
//

int POT, in, ultimoIn, complete;
long int offset_LM, offset_RM, offset_G;
byte red_r, green_r, blue_r, white_r, num_r, red_l, green_l, blue_l, white_l, num_l, color_r, color_l, nova_r, nova_l, last_color; 	
byte last_dir, handle;
char dir[3][3] = {{-1, -1, -1}, {-1, -1, -1}, {-1, -1, -1}};

// FUNCAO DO BLUETOOTH
//
//

sub BTCheck(int conn){
    if (!BluetoothStatus(conn)==NO_ERR){
        TextOut(5,LCD_LINE2,"Error");
        Wait(1000);
        Stop(true);
    }
}

// FUNCOES BASE PARA O FUNCIONAMENTO DO ROBO
//
//

// Inicializa tudo
sub Init(){
    // Set das portas
    SetSensorHTGyro(GYRO);
    SetSensorLowspeed(L_COLOR);
    SetSensorLowspeed(R_COLOR);
    SetHTColor2Mode(L_COLOR, HT_CMD_COLOR2_ACTIVE);
    SetHTColor2Mode(R_COLOR, HT_CMD_COLOR2_ACTIVE);

    // Variáveis globais
    last_color = BLACK;
    last_dir = FRENTE;
    complete = 0;
    ultimoIn = 0;
    POT = -50;
    handle = 0;
}

void SetOffsets(void){ // So seta os offsets, com seus valores absolutos :)
    offset_LM = MotorRotationCount(L_MOTOR);
    offset_RM = MotorRotationCount(R_MOTOR);
    offset_G = MotorRotationCount(GATE);
}

float CalculaDistancia(float angulo_motor){ // Calcula a distancia em cm equivalente a angulacao do motor passada como argumento
    float distancia;
    distancia = (angulo_motor*2*PI*RAIO_RODA)/(360);
    return abs(distancia);
}

float CalculaAngulo(float distancia){ // Calcula o angulo em graus que o motor deve girar para que seja percorrida a distancia passada como argumento
    float angulo_motor;
    angulo_motor = (distancia*360)/(2*PI*RAIO_RODA);
    return abs(angulo_motor);
}

float GetGyroOffset(){ // Calcula o offset do giroscopio
    float gyro_sum = 0, i;

    for(i = 0; i < OFFSET_SAMPLES; ++i)
        gyro_sum += SensorHTGyro(GYRO);

    return gyro_sum/OFFSET_SAMPLES;
}

// FUNCOES PARA DETECTAR AS CORES E FIM DA PISTA
//
//

sub detect_colors(){ // Tabela a saída dos sensores de luz para as cores lidas
    ReadSensorHTColor2Active(R_COLOR, num_r, red_r, green_r, blue_r, white_r);
    ReadSensorHTColor2Active(L_COLOR, num_l, red_l, green_l, blue_l, white_l);

    /*Achei melhor if em vez de switch pois os valores lidos dependem da calibração*/
    if(num_r == 14)
        if(white_r > 217 && red_r > 217 && green_r > 217 && blue_r > 217) // Parametros experimentais, confia rsrs
            color_r = WHITE;
        else
            color_r = OUT;
    else if(num_r == 12)
        if(white_r > 217 && red_r > 217 && green_r > 217 && blue_r > 217) // Parametros experimentais, confia rsrs
            color_r = WHITE;
        else
            color_r = BLACK;
    else if(num_r == 17)
        color_r = BLACK;
    else if(num_r == 13)
        color_r = WHITE;
    else if(num_r == 4)
        color_r = GREEN;
    else if(num_r == 3 || num_r == 2)
        color_r = BLUE;
    else if(num_r >= 7 && num_r <= 10)
        color_r = RED;


    if(num_l == 14)
        if(white_l > 217 && red_l > 217 && green_l > 217 && blue_l > 217) // Parametros experimentais, confia rsrs
            color_l = WHITE;
        else
            color_l = OUT;
    else if(num_l == 12)
        if(white_l > 217 && red_l > 217 && green_l > 217 && blue_l > 217) // Parametros experimentais, confia rsrs
            color_l = WHITE;
        else
            color_l = BLACK;
    else if(num_l == 17)
        color_l = BLACK;
    else if(num_l == 13)
        color_l = WHITE;
    else if(num_l == 4)
        color_l = GREEN;
    else if(num_l == 3 || num_l == 2)
        color_l = BLUE;
    else if(num_l >= 7 && num_l <= 10)
        color_l = RED;
}

// Detecta se esta caindo e corrige a trajetória
sub detect_fall(){
    if(color_r == OUT && color_l != OUT){
        Off(MOTORS);
        Wait(100);
        detect_colors();
        // Espera o robô parar para ver se ele está realmente fora da pista
        if(color_r == OUT && color_l != OUT){
            OnFwd(R_MOTOR, POT);
            OnRev(L_MOTOR, POT*0.4);
            while(color_r == OUT && color_l != OUT){
                detect_colors();
            }

            detect_colors();
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
            while(color_r == last_color || color_l == last_color)
                detect_colors();
        }
        else
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
    };
    if(color_l == OUT && color_r != OUT){
        Off(MOTORS);
        Wait(100);
        detect_colors();
        // Mesmo comentário de algumas linhas acima
        if(color_l == OUT && color_r != OUT){
            OnFwd(L_MOTOR, POT);
            OnRev(R_MOTOR, POT*0.4);
            while(color_l == OUT && color_r != OUT){
                detect_colors();
            }

            detect_colors();
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
            while(color_r == last_color || color_l == last_color)
                detect_colors();

        }
        else
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
    };
}

// FUNCOES DE CONTROLE DOS MOTORES
//
// Os milhoes de abs() foram pra deixar o codigo so com valores positivos pq o Lucas deu rage que nada funcionava com valores negativos

void AndaReto(float distancia){ // Anda pra frente ou pra tras ate atingir a distancia passada como argumento
    float angulo_limite = abs(CalculaAngulo(distancia));

    SetOffsets();
    if(distancia > 0){ // anda pra frente
        OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
        while(abs(MotorRotationCount(R_MOTOR) - offset_RM) < angulo_limite && abs(MotorRotationCount(L_MOTOR) - offset_LM) < angulo_limite){
            detect_colors();
            detect_fall();
        }

    } else { // anda pra trás
        OnRevReg(MOTORS, POT, OUT_REGMODE_SYNC);
        while(abs(MotorRotationCount(R_MOTOR) - offset_RM) < angulo_limite && abs(MotorRotationCount(L_MOTOR) - offset_LM) < angulo_limite);
    }

    Off(MOTORS);
}

void MovePortao(float angulo_limite){ // Levanta ou abaixa o portao dependendo do argumento passado
    SetOffsets();
    if(angulo_limite > 0){ // levanta o portao
        while(abs(MotorRotationCount(GATE) - offset_G) < angulo_limite){
            OnFwd(GATE, POT);
        }
        OnFwd(GATE, POT+10);

    } else { // abaixa o portao
        angulo_limite = -angulo_limite; // trabalhar com coisas positivas é melhor
        while(abs(MotorRotationCount(GATE) - offset_G) < angulo_limite){
            OnRev(GATE, POT);
        }
        OnRev(GATE, POT+10);
    }
}

sub TurnGyroDireita(float degrees){ // Faz apenas a roda direita rodar, para frente ou para tras ate que o robo gire a angulacao desejada
    float angle = 0, gyro = 0;
    unsigned long time, prev_time;

    Off(MOTORS);
    float offset = GetGyroOffset();
    time = CurrentTick();

    if(degrees < 0){ // Sentido anti-horario
        OnFwd(R_MOTOR, -75);
        while(angle > degrees){
            prev_time = time;
            time = CurrentTick();
            gyro = SensorHTGyro(GYRO, offset);
            angle += gyro * (time - prev_time)/1000.0;
        }

    } else { // Sentido horario
        OnRev(R_MOTOR, -75);
        while(angle < degrees){
            prev_time = time;
            time = CurrentTick();
            gyro = SensorHTGyro(GYRO, offset);
            angle += gyro * (time - prev_time)/1000.0;
        }
    }
    Off(MOTORS);
}

sub TurnGyroEsquerda(float degrees){ // Faz apenas a roda esquerda rodar, para frente ou para tras ate que o robo gire a angulacao desejada
    float angle = 0, gyro = 0;
    unsigned long time, prev_time;

    Off(MOTORS);
    float offset = GetGyroOffset();
    time = CurrentTick()

    if(degrees < 0){ // Sentido anti-horario
        OnRev(L_MOTOR, POT-25);
        while(angle > degrees){
            prev_time = time;
            time = CurrentTick();
            gyro = SensorHTGyro(GYRO, offset);
            angle += gyro * (time - prev_time)/1000.0;
        }

    } else { // Sentido horario
        OnFwd(L_MOTOR, POT-25);
        while(angle < degrees){
            prev_time = time;
            time = CurrentTick();
            gyro = SensorHTGyro(GYRO, offset);
            angle += gyro * (time - prev_time)/1000.0;
        }
    }
    Off(MOTORS);
}

// Vira 90 graus pra direita
sub TurnRight(){
    TurnGyroDireita(15);
    TurnGyroEsquerda(15);
    TurnGyroDireita(15);
    TurnGyroEsquerda(13);
}

// Vira 90 graus pra esquerda
sub TurnLeft(){
    TurnGyroEsquerda(-15);
    TurnGyroDireita(-15);
    TurnGyroEsquerda(-15);
    TurnGyroDireita(-13);
}

// Meia Volta
sub TurnBack(){
    TurnGyroDireita(88);
    TurnGyroEsquerda(70);
}

//FUNCOES PARA PEGAR BONECOS
//
//

void Rebolada(){ // (bem Anitta mesmo) Anda um pouquinho com as duas rodas alternadamente pra ajudar a girar as rodinhas de apoio
    Wait(200);
    OnFwd(R_MOTOR, POT);
    Wait(100);
    Off(MOTORS);
    OnFwd(L_MOTOR, POT);
    Wait(100);
    Off(MOTORS);
    OnFwd(R_MOTOR, POT);
    Wait(100);
    Off(MOTORS);
    OnFwd(L_MOTOR, POT);
    Wait(100);
    Off(MOTORS);
}

int AndaVerificando(){ // Anda reto ate encontrar o fim da pista
    float angulo_limite;
    long int dist_andada;

    Rebolada(); // Ajudar a endireitar as rodinhas de apoio
    detect_colors();
    SetOffsets();

    OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
    while(color_l != OUT && color_r != OUT){
        while(color_l != OUT && color_r != OUT)
            detect_colors();
        Off(MOTORS);
        Wait(100);
        detect_colors();
        OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
    }

    Off(MOTORS);
    dist_andada = CalculaDistancia(abs(MotorRotationCount(R_MOTOR) - offset_RM));

    if(dist_andada > 15){ // O robo chegou ao fim da parada
        detect_colors(); // Para checar se chegou torto
        if(color_l == OUT && color_r == WHITE){
            TurnGyroDireita(3);
            detect_colors();
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
            while(color_l != OUT && color_r != OUT)
                detect_colors();
            Off(MOTORS);
        }

        if(color_r == OUT && color_l == WHITE){
            TurnGyroEsquerda(-3);
            detect_colors();
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
            while(color_l != OUT && color_r != OUT)
                detect_colors();
            Off(MOTORS);
        }

        return 0;

    } else { // O robo precisa se ajustar pra entrar na parada
        if(color_r == OUT){ // Lado direito pra fora
            TurnGyroDireita(10);
            TurnGyroEsquerda(-12);

        } else { // Lado esquerdo pra fora
            TurnGyroEsquerda(-10);
            TurnGyroDireita(13);
        }
        return 1;
    }
}

void SegueViagem(){ // Fecha o portao, dá ré e sai da parada para a rua girando uma roda de cada vez (todos os parâmetros claramente são experimentais)
    Wait(200);
    MovePortao(-120);
    AndaReto(-13);
    TurnGyroEsquerda(-15);
    TurnGyroDireita(-15);
    TurnGyroEsquerda(-15);
    TurnGyroDireita(-19);
}

void PegaPessoas(){ // Compiladão pra Anitta pegar geral (os nomes das funcoes tão bem sugestivos)
    Off(MOTORS);
    MovePortao(120);
    AndaReto(26);
    TurnGyroDireita(85);
    while(AndaVerificando());
    SegueViagem();
    POT += 10;
}

// FUNÇÕES PARA ESCRITA E LEITURA DE ARQUIVOS
//
//

// Abre o arquivo no começo do código, se o código já existe atualiza matriz com os valores, se não, inicializa
// um arquivo
// O arquivo vai conter 3 bytes, equivalentes às direções das cores RGB, nessa ordem. -1 indica que a cor ainda não
// foi relacionada com uma direção
sub open_file_read(){
	unsigned int rtn_code=0, file_size = FILE_SIZE;
	rtn_code = OpenFileRead(FILE_NAME, file_size, handle);
	if(rtn_code == LDR_SUCCESS){
		ClearLine(LCD_LINE1);
		TextOut(0, LCD_LINE1, "Arquivo existia");
		Wait(5000);
		write_matrix();
	}
	else if(rtn_code == LDR_FILENOTFOUND){
		ClearLine(LCD_LINE1);
		TextOut(0, LCD_LINE1, "Arquivo n existia");
		Wait(5000);
		initialize_file();
	}
	else {
		// Tratamento de erros
	};
}

// Funcao para chamar toda vez que descobre uma relacao cor-direcao
sub update_file(byte color, byte direction){
	unsigned int rtn_code=0, file_size = FILE_SIZE;
	rtn_code = OpenFileRead(FILE_NAME, file_size, handle);
	if(rtn_code == LDR_SUCCESS){
		char direcoes[3], x;
		byte i=0;
		for(i=0;i<3;i++){
			rtn_code = Read(handle, x);
			direcoes[i] = x;
			if(rtn_code != LDR_SUCCESS){
				// Tratamento de erro
			};
		};
		CloseFile(handle);
		rtn_code = DeleteFile(FILE_NAME);
		if(rtn_code != LDR_SUCCESS){
			// Se deu erro na hora de deletar é putaria
		}
		else {
			rtn_code = CreateFile(FILE_NAME, FILE_SIZE, handle);
			if(rtn_code != LDR_SUCCESS){
				// Tratamento de erro
			}
			else {
				for(i=0;i<3;i++){
					if(i != color){
						x = direcoes[i];
						rtn_code = Write(handle, x);
					}
					else {
						x = direction;
						rtn_code = Write(handle, x);
					};
					if(rtn_code != LDR_SUCCESS){
						// Tratamento de erro
					};
				};
			};	
		}; 	
	}
	else {
		// Tratamento de Erro
	};
	CloseFile(handle);
}

sub write_matrix(){
	int i=0, j=0, x;
	char direcao;
	unsigned int rtn_code = 0;
	for(i=0;i<3;i++){
		rtn_code = Read(handle, direcao);
		if(rtn_code == LDR_SUCCESS){
			ClearLine(LCD_LINE1);
			ClearLine(LCD_LINE2);
			TextOut(0, LCD_LINE1, "direcao");
			NumOut(40, LCD_LINE1, i);
			NumOut(0, LCD_LINE2, direcao);
			Wait(5000);
			if(direcao>=0){
				x = direcao;
				for(j=0;j<3;j++){
					if(j == x){
						dir[i][j] = 1;
						dir[(i+1)%3][j] = 0;
						dir[(i+2)%3][j] = 0;
					}
					else
						dir[i][j] = 0;	
				};
				complete++;		
			};
		}
		else {
			// Tratamento de erros no arquivo
		};
	};
	CloseFile(handle);
}

sub initialize_file(){
	unsigned int rtn_code = 0;
	rtn_code = CreateFile(FILE_NAME, FILE_SIZE, handle);
	if(rtn_code == LDR_SUCCESS){
		char x = -1;
		int i;
		for(i=0; i<3; i++){
			rtn_code = Write(handle, x);
			if(rtn_code != LDR_SUCCESS){
				// Tratamento de Erros
			};	
		};
	}
	else if(rtn_code == LDR_FILEEXISTS){
		// Estranho, já que ele tentou abrir na função anterior e não conseguiu
	}
	else {
		// Tratamento de erros
		// O problema é mais fundo
	};
	CloseFile(handle);	
}

// FUNÇÕES PARA NAVEGAÇÃO NA ARENA
//
//

// Ajusta o robô para sair da intersecção para poder virar ou seguir reto
sub adjust(){

    // Incluir código pra fazer o robô se alinhar pra somente uma cor? Evitando uma parte estar fora da pista

    nova_r = color_r;
    nova_l = color_l;

    // Se for preto não precisa de ajuste
    OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
    while(nova_r == color_r || nova_l == color_l){
        detect_colors();
        detect_fall();
    }
    Off(MOTORS);

    if(nova_r != BLACK && nova_l != BLACK){
        Wait(400);
        AndaReto(2);
        Off(MOTORS);
    };
    Wait(100);
}

sub adjust_color(){
    detect_colors();
    if(color_l == WHITE && color_r != WHITE){
        OnFwd(L_MOTOR, -40);
        OnRev(R_MOTOR, -40);
        while(color_r != color_l)
            detect_colors();
    }
    else if(color_r == WHITE && color_l != WHITE){
        OnFwd(R_MOTOR, -40);
        OnRev(L_MOTOR, -40);
        while(color_r != color_l)
            detect_colors();
    }
}

// Escolhe para onde virar
sub choose_path(){

    adjust();

    if(nova_r == nova_l && nova_r == BLACK){
        // Chegou no fim da pista
        // O preto 'nunca' vai ser a primeira cor a ser lida
        // nunca = Desde que o robô não ultrapasse uma cor sem ler absolutamente nada

        // Esta condição serve mais para teste experimentais, onde o robô é retirado da pista com as mãos
        if(complete >= 2){
            ClearLine(LCD_LINE1);
            TextOut(0, LCD_LINE1, "ENTREI CARAI");
            POT = -75;
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
        }
        else{
            if(last_color>=0 && last_color <=2)
                dir[last_color][last_dir] = 0;
            TurnBack();
            adjust_color();
            last_color = BLACK;
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
        };
    }
    else if(nova_r == nova_l && nova_r<3 && nova_r >= 0){

        if(last_color != BLACK){
            // Já conectou uma cor com uma direção, logo, nega as outras possibilidades que envolvem essa cor/direção
            // Evita fazer operações repetidas
            if(dir[last_color][last_dir] != 1){
                dir[last_color][last_dir] = 1;
                dir[last_color][(last_dir+1)%3] = 0;
                dir[last_color][(last_dir+2)%3] = 0;
                dir[(last_color+1)%3][last_dir] = 0;
                dir[(last_color+2)%3][last_dir] = 0;
                complete++;
                update_file(last_color, last_dir);
            };
        };

        //Verifica qual o próximo caminho livre para seguir, -1 para teste e 1 para certeza
        byte i;
        for(i=0;i<3;i++){
            if(dir[nova_r][i] != 0){
                if(i == DIREITA){
                    //Só é possível pegar a direita chegando do caminho certo, seguindo a lógica do código, logo
                    //tudo o que é necessário é virar 90 graus para a direita.
                    TurnRight();
                    Wait(200);
                    last_dir = DIREITA;
                    break;
                }
                else if(i == FRENTE){
                    // Se a próxima possibilidade for ir em frente, é só virar 90 graus se chegou do preto ou não fazer nada
                    // A direção para frente nunca será a primeira a ser testada, logo, pode-se assumir o que está em cima
                    // Salvo na utilização de arquivos
                    if(last_color == BLACK && dir[nova_r][i] != 1)
                        TurnRight();
                    last_dir = FRENTE;
                    break;
                }
                else {
                    // Quado o código cai nessa condição, as duas outras direções para essa cor já foram discartadas,
                    // se ele não veio do preto, a única direção que resta é a esquerda, se veio e a última a tentar foi frente
                    // segue o baile.
                    if(last_color != BLACK || dir[nova_r][i] == 1){
                        TurnLeft();
                    }
                    else {
                        if(last_dir == FRENTE){
                            TurnRight();
                        };
                    };
                    last_dir = ESQUERDA;
                    break;
                };
            };
        };

        last_color = nova_r;
        OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
    };
}

void detect_people(){
    ReceiveRemoteNumber(IN_MBOX,true,in);
    ClearLine(LCD_LINE7);
    NumOut(5,LCD_LINE7,in);
    if (in == 1 && ultimoIn != 1){ // Detectou bonecos
        Off(MOTORS);
        PegaPessoas();
        SendResponseNumber(OUT_MBOX,0xFF);
        OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
        ultimoIn = 1;

   }else if(in == 0){
        ultimoIn = 0;
   }
}

sub print_matrix(){
	ClearLine(LCD_LINE1);
	ClearLine(LCD_LINE2);
	ClearLine(LCD_LINE3);
	NumOut(0, LCD_LINE1, dir[0][0]);
	NumOut(35, LCD_LINE1, dir[0][1]);
	NumOut(70, LCD_LINE1, dir[0][2]);
	NumOut(0, LCD_LINE2, dir[1][0]);
	NumOut(35, LCD_LINE2, dir[1][1]);
	NumOut(70, LCD_LINE2, dir[1][2]);
	NumOut(0, LCD_LINE3, dir[2][0]);
	NumOut(35, LCD_LINE3, dir[2][1]);
	NumOut(70, LCD_LINE3, dir[2][2]);
	Wait(5000);
}

task main(){
    Init();

	open_file_read();
	
	print_matrix();

    /*BTCheck(0);
    SendResponseNumber(OUT_MBOX,0xFF); //unblock master */
    OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);

    while(true){
        //detect_people();
        detect_colors();
        detect_fall();

        if(color_r != WHITE && color_l != WHITE){
            Off(MOTORS);
            detect_colors();
            choose_path();
            ClearLine(LCD_LINE7);
            TextOut(0, LCD_LINE7, "COMPLETE:");
            NumOut(55, LCD_LINE7, complete);
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
        };
    }
}
