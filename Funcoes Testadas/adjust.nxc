#define L_MOTOR OUT_A
#define R_MOTOR OUT_C
#define MOTORS OUT_AC
#define GATE OUT_B
#define L_COLOR IN_1
#define R_COLOR IN_4

#define GYRO IN_3
#define VELOCIDADE_MAX 12
#define VELOCIDADE_MIN 10
#define POT_MAX -70
#define BLACK_MAX 200
#define BLACK    3
#define WHITE    4
#define RED      0
#define BLUE     1
#define GREEN    2
#define OUT      5
#define RAIO_RODA 4
#define INSENSIBILIDADE 0.9
#define POT -50

#define OFFSET_SAMPLES 3000

#define BLACK    3
#define WHITE    4
#define RED      0
#define BLUE     1
#define GREEN    2
#define OUT      5

#define DIREITA  0
#define FRENTE   1
#define ESQUERDA 2

#define DIAMETER 8.3 // Aproximado

#define BT_CONN 1
#define OUT_MBOX 1
#define IN_MBOX 5

int pot = -40;
float offset_LM, offset_RM, offset_G, velocidade_a = 0, velocidade_c = 0, velocidade_media = 0, valor = 30;

byte red_r, green_r, blue_r, white_r, num_r, red_l, green_l, blue_l, white_l, num_l, color_r, color_l;
byte nova_r, nova_l, last_color, last_dir;

float CalculaAngulo(float distancia){ // Calcula o angulo em graus que o motor deve girar para que seja percorrida a distancia passada como argumento
    float angulo_motor;
    angulo_motor = (distancia*360)/(2*PI*RAIO_RODA);
    return abs(angulo_motor);
}



void SetOffsets(void){ // So seta os offsets :)
    offset_LM = abs(MotorRotationCount(L_MOTOR));
    offset_RM = abs(MotorRotationCount(R_MOTOR));
    offset_G = abs(MotorRotationCount(GATE));
}


void AndaReto(float distancia){ // Anda pra frente ou pra tras ate atingir a distancia passada como argumento
    float angulo_limite = abs(CalculaAngulo(distancia));

    SetOffsets();
    if(distancia > 0){
        OnFwdReg(MOTORS, pot, OUT_REGMODE_SYNC);
        while(abs(abs(MotorRotationCount(R_MOTOR)) - offset_RM) < angulo_limite && abs(abs(MotorRotationCount(L_MOTOR)) - offset_LM) < angulo_limite);
    }else{
        OnRevReg(MOTORS, pot, OUT_REGMODE_SYNC);
        while(abs(abs(MotorRotationCount(R_MOTOR)) - offset_RM) < angulo_limite && abs(abs(MotorRotationCount(L_MOTOR)) - offset_LM) < angulo_limite);
    Off(MOTORS);
    }
}

// Função que tabela a saída dos sensores de luz para as cores lidas
sub detect_colors(){
    ReadSensorHTColor2Active(R_COLOR, num_r, red_r, green_r, blue_r, white_r);
    ReadSensorHTColor2Active(L_COLOR, num_l, red_l, green_l, blue_l, white_l);

    /*Achei melhor if em vez de switch pois os valores lidos dependem da calibração*/
    if(num_r == 14)
        if(white_r > 217 && red_r > 217 && green_r > 217 && blue_r > 217) // Parametros experimentais, confia rsrs
            color_r = WHITE;
        else
            color_r = OUT;
    else if(num_r == 12)
        if(white_r > 217 && red_r > 217 && green_r > 217 && blue_r > 217) // Parametros experimentais, confia rsrs
            color_r = WHITE;
        else
            color_r = BLACK;
    else if(num_r == 17)
        color_r = BLACK;
    else if(num_r == 13)
        color_r = WHITE;
    else if(num_r == 4)
        color_r = GREEN;
    else if(num_r == 3 || num_r == 2)
        color_r = BLUE;
    else if(num_r >= 7 && num_r <= 10)
        color_r = RED;


    if(num_l == 14)
        if(white_l > 217 && red_l > 217 && green_l > 217 && blue_l > 217) // Parametros experimentais, confia rsrs
            color_l = WHITE;
        else
            color_l = OUT;
    else if(num_l == 12)
        if(white_l > 217 && red_l > 217 && green_l > 217 && blue_l > 217) // Parametros experimentais, confia rsrs
            color_l = WHITE;
        else
            color_l = BLACK;
    else if(num_l == 17)
        color_l = BLACK;
    else if(num_l == 13)
        color_l = WHITE;
    else if(num_l == 4)
        color_l = GREEN;
    else if(num_l == 3 || num_l == 2)
        color_l = BLUE;
    else if(num_l >= 7 && num_l <= 10)
        color_l = RED;
}





// Ajusta o robô para sair da intersecção para poder virar ou seguir reto
sub adjust(){

    nova_r = color_r;
    nova_l = color_l;

    // Se for preto não precisa de ajuste
    OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
    while(nova_r == color_r || nova_l == color_l){
        detect_colors();
    }
    Off(MOTORS);

    if(nova_r != BLACK && nova_l != BLACK){
        Wait(400);
        AndaReto(2);
        Off(MOTORS);
    };
    Wait(800);
}

task main(){

SetSensorHTGyro(GYRO);
SetSensorLowspeed(L_COLOR);
SetSensorLowspeed(R_COLOR);
SetHTColor2Mode(L_COLOR, HT_CMD_COLOR2_ACTIVE);
SetHTColor2Mode(R_COLOR, HT_CMD_COLOR2_NEAR);



    adjust();
}