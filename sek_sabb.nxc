#define L_MOTOR OUT_A
#define R_MOTOR OUT_C
#define MOTORS OUT_AC
#define GATE OUT_B

#define L_COLOR IN_1
#define R_COLOR IN_4
// #define L_ULTRAS
#define R_ULTRAS IN_2
#define GYRO IN_3

#define POT -60
#define POT_LOW -10

#define BLACK_MAX 200
/*#define RED
#define GREEN
#define BLUE
#define WHITE */
#define OFFSET_SAMPLES 2000.0
#define RAIO_RODA 3
#define DO_IT_AGAIN 0
#define GO_ON_BUDDY 1

/* Variaveis globais */
float offset_LM, offset_RM, offset_GM;
byte red_r, green_r, blue_r, white_r, num_r, red_l, green_l, blue_l, white_l, num_l;

void SetOffsets(void){
    offset_LM = MotorRotationCount(L_MOTOR);
    offset_RM = MotorRotationCount(R_MOTOR);
}

float GetAngle(float distance){
    float motor_angle;
    motor_angle = (distance*360)/(2*PI*RAIO_RODA);
    return -motor_angle; // O retorno da funcao Ã© negativo pq nossos motores estao ao contrario 
}

float GetGyroOffset(){
    float gyro_sum = 0, i;

    for(i = 0; i < OFFSET_SAMPLES; ++i)
        gyro_sum += SensorHTGyro(GYRO);
    
    return gyro_sum/OFFSET_SAMPLES;
}

/* Faz o robo girar ate que a angulacao desejada seja alcancada */
sub TurnGyro(float degrees){
    float angle = 0, gyro = 0;
    unsigned long time = CurrentTick(), prev_time;

    Off(MOTORS);

    degrees = -degrees;

    float offset = GetGyroOffset();
    
    if(degrees > 0) {
        while(angle < degrees){
            /*OnRev(R_MOTOR, POT);
            Wait(400);
            Off(MOTORS);
            OnFwd(L_MOTOR, POT);
            Wait(300);*/
            OnRev(R_MOTOR, POT);
            prev_time = time;
            time = CurrentTick();
            gyro = SensorHTGyro(GYRO);
            angle += (gyro - offset) * (time - prev_time)/1000.0;
            /*ClearLine(LCD_LINE1);
            TextOut(0, LCD_LINE1, "ANGLE:");
            Num_rOut(48, LCD_LINE1, angle);*/
        }

    } else {
        OnFwd(R_MOTOR, POT);
        //OnRev(L_MOTOR, POT);
        while(angle > degrees){
            prev_time = time;
            time = CurrentTick();
            gyro = SensorHTGyro(GYRO);
            angle += (gyro - offset) * (time - prev_time)/1000.0;
            /*ClearLine(LCD_LINE1);
            TextOut(0, LCD_LINE1, "ANGLE:");
            Num_rOut(48, LCD_LINE1, angle);*/
        }
    }

    Off(MOTORS);
}

/* Ajusta o robo na hora de pegar os bonecos caso uma extremidade esteja quase fora da pista */
void Adjust(float limit_angle, char motor){
    if(motor == 'R'){
        offset_RM = MotorRotationCount(R_MOTOR);

        while((MotorRotationCount(R_MOTOR) - offset_RM) < limit_angle){
            OnRev(R_MOTOR, POT);
        }
        Off(R_MOTOR);

        offset_LM = MotorRotationCount(L_MOTOR);

        while((MotorRotationCount(L_MOTOR) - offset_LM) < limit_angle){
            OnRev(L_MOTOR, POT);
        }
        Off(L_MOTOR);

    } else {
        offset_LM = MotorRotationCount(L_MOTOR);

        while((MotorRotationCount(L_MOTOR) - offset_LM) < limit_angle){
            OnRev(L_MOTOR, POT);
        }
        Off(L_MOTOR);

        offset_RM = MotorRotationCount(R_MOTOR);

        while((MotorRotationCount(R_MOTOR) - offset_RM) < limit_angle){
            OnRev(R_MOTOR, POT);
        }
        Off(R_MOTOR);        
    }
}

/* Movimentos necessarios para a captura do boneco */
void PickUpPeople(void){
    int condition = DO_IT_AGAIN;
    float limit_angle;

    /* Abre o portao e gira na direcao do boneco avistado */
    OnFwd(GATE, POT);
    Wait(400);
    OnFwd(GATE, POT_LOW);
    TurnGyro(-80.0);


    /* Anda ate o limite da pista e testa se alguma extremidade esta quase para fora da pista */
    while(condition == DO_IT_AGAIN){
        SetOffsets();
        limit_angle = GetAngle(7);

        while((MotorRotationCount(R_MOTOR) - offset_RM) > limit_angle && (MotorRotationCount(L_MOTOR) - offset_LM) > limit_angle){
            OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
        }
        Off(MOTORS);

        ReadSensorHTColor2Active(R_COLOR, num_r, red_r, green_r, blue_r, white_r);
        ReadSensorHTColor2Active(L_COLOR, num_l, red_l, green_l, blue_l, white_l);

        if(white_r < BLACK_MAX){
            limit_angle = GetAngle(8);
            Adjust(limit_angle, 'R');
            offset_RM = MotorRotationCount(R_MOTOR);

        } else if(white_l < BLACK_MAX){
            limit_angle = GetAngle(8);
            Adjust(limit_angle, 'L');
            offset_LM = MotorRotationCount(L_MOTOR);

        } else {
            condition = GO_ON_BUDDY;
        }
    }

    SetOffsets();
    limit_angle = GetAngle(10);

    /* Avanca ate o boneco */
    while((MotorRotationCount(R_MOTOR) - offset_RM) > limit_angle && (MotorRotationCount(L_MOTOR) - offset_LM) > limit_angle){
        OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);
    }
    Off(MOTORS);

    /* Fecha o portao */
    OnRev(GATE, -50);
    Wait(700);
    Off(GATE);

    SetOffsets();
    limit_angle = GetAngle(17);

    /* Da re e gira de volta para seguir viagem */
    while((MotorRotationCount(R_MOTOR) - offset_RM) > limit_angle && (MotorRotationCount(L_MOTOR) - offset_LM) > limit_angle){
        OnRev(MOTORS, POT);
    }
    Off(MOTORS);
    TurnGyro(80.0);
}


task main(){
    SetSensorHTGyro(GYRO);
    SetSensorLowspeed(L_COLOR);
    SetSensorLowspeed(R_COLOR);
    SetHTColor2Mode(L_COLOR, HT_CMD_COLOR2_ACTIVE);
    SetHTColor2Mode(R_COLOR, HT_CMD_COLOR2_NEAR);
    SetSensorUltrasonic(R_ULTRAS);
    //SetSensorUltrasonic(L_ULTRAS);

    while(true){
        OnFwdReg(MOTORS, POT, OUT_REGMODE_SYNC);

        if(SensorUS(R_ULTRAS) <= 25){
            Wait(900);
            Off(MOTORS);
            PickUpPeople();
        }
    }
}
